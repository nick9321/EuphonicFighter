program EuphonicFighter;
  {$DEFINE SMART}
  //{$DEFINE SRL5}   //dont touch


  {$i SRL/srl.simba}
  {$i SRL/SRL/misc/paintsmart.simba}

{ By nickrules. Thanks to Flight, and of course, the SRL community / devs }


Type TPickupArray = record
  Names:TStringArray;
  Colors,Tols:TIntegerArray;
  HMods,SMods:TExtendedArray;
  end;

Type TMonster = record
  CTS,exp,goodcolor:integer;
  HMod,SMod:TExtendedArray;
  Uptext:TStringArray;
  Color,Tol:TIntegerArray;
  width, height,mincount:integer;
  end;

Type TFighter = record
  User, pass, speed, skill,mode:string;
  WhatMonster:TMonster;
  alwaysdrop:TStringArray;
  Active,TrainPrayer,doRelocate,pickupdrops:Boolean;
  ranged,EmergencyTeleport,hopworlds,ignoreCombat:boolean;
  breakevery,plusrand,breakfor,monsterWait:integer;
  PickUps:TPickupArray;
  Clicktype:integer;
  end;

Const //notouchy!
  ITEM_FOOD = 0;
  ITEM_BONE = 1;
  ITEM_POT  = 2;
  ITEM_ETC  = 3;
  version   = 'X';

Var
  KillCount,Exp,HPExp,
  WeaponTimer, lastinvcount: Integer;
  MonsterIndex: TIntegerArray;
  Fighters: Array of TFighter;
  monster_man,monster_giantrat,monster_goblin,monster_WolfMinotaur,monster_LesserDemon : TMonster;
  FoodArray,IgnoreArray: TBooleanArray;
  Foodcount, namecover,splash: integer;
  lastbreak,breaks,breaksplash:integer;
  lastonscreen,predictedbreak:integer;


  //BEGIN SETUP HERE!'//
Const
  DEBUGMODE = true;
  SRLStatsUsername = '';
  SRLStatsPassword = '';
  AutoUpdate = true; //setting true will auto update the script! this is HIGHLY recommended!


Procedure DeclarePlayers;
begin
  HowManyPlayers := 1;   //don't forget to set this!
  SetArrayLength(Fighters, HowManyPlayers);
  NumberOfPlayers(HowManyPlayers);
  CurrentPlayer := 0;

  /////////////////////////
  with Fighters[0] do
  begin
    User   := '';
    Pass   := '';
    speed  := 'normal'; //weapon speed - 'slow','fast',or 'normal'. Just take a guess. Too long (may) reduce exp/h slightly. Stick with normal if you don't know what you're doing.
    mode   := 'pure';  //You can ignore this if you want. Choices are 'random', 'lowest', 'pure', 'attack','strength', or 'defense' (protip: there are more, if you know where to look. 40flat doesn't work right, btw)
    active := true;
    alwaysdrop := ['Bones','abbage']

    breakevery  := 25; //just set this to an impossibly high number to disable breaks
    plusrand    := 10; //Random amount to add to break time
    breakfor    := 7;  //how long to break
    hopworlds   := true;  //hop worlds after break?

    doRelocate        := false;  //Sorta works... kinda... not really. Okay, maybe a little.
    EmergencyTeleport := False;  //Set to true if you have a teletab in the first slot. If you hp is red and you have no (known) food, it will whisk you away.
    ranged            := true; //this does not affect the actual fighting,
                               //but merely picks the farthest target

    TrainPrayer := false; //slows combat exp, gets more randoms, but gets prayer exp
                         //must have bone pickup set up below!

    ignoreCombat := false; //ignores monsters in combat (false = multicombat)
    MonsterWait  := 60; //wait this many second for a monster,
                        //  and if none are found in that time, logout.

   {
    With WhatMonster do    //****this is one way - use custom setups *****
    begin        //MORE COLORS = LONGER SEARCH TIME = LESS KILLS, MORE MISCLICKS
      CTS       := 2;    //for each color you need a tolerance (and hmod/smod if cts = 2)
      Color     := [7238776,7764347]; //colors/tols/mods MUST correspond with eachother!
      exp       := 24;                                //if they don't you'll search for a color with the wrong tol/mods!
      hmod      := [0.19,0.42];
      smod      := [0.33,0.07];
      uptext    := ['Giant','rat','t rat','iant']; //however, you have have as many possible uptexts as you want
      Mincount  := 100;                        //**UPTEXT IS CASE SENSITIVE**
      Tol       := [9,8];
      Width     := 15;
      Height    := 15;                        //in this example, the first color in the list uses the first HMod/SMod/Tol in each of their respective lists.
    end;                                     //the second color uses the second HMod/SMod/tolerance.
                                              //But both colors use the same uptext, mincount, exp, etc.
     }
    whatmonster := monster_giantrat; //or a few presets I made!  (monster_man, monster_giantrat, monster_goblin, monster_WolfMinotaur, monster_LesserDemon)

    Clicktype := mouse_left;  //set to mouse_right if you have to rightclick the monster. Will reduce exp/h, as it does not check uptext.
    PickUpDrops := true;    //set to true to pick up drops, as defined below.

    with PickUps do
    begin        //please note, even if trainprayer = true, you
                 //must set up bones in here for pickup.
      Names  := ['meat'];    //once again, the colors must correspond with eachother
      Colors := [4221392{,13159898}];       //just like above
      Hmods  := [0.89{,0.25}];
      SMods  := [1.24{,1.19}];
      Tols   := [2{,12}];
    end;

    end;
  /////////////////////////
end;
 //SETUP IS FINISHED! Don't change anything beyond this, unless you know what you're doing!


//DO *NOT* TOUCH! If you do, I will hunt you down, and cut you.
  Procedure Notouch;                                        //DO *NOT* TOUCH!
  var i:integer;                                            //DO *NOT* TOUCH!
  begin                                                     //DO *NOT* TOUCH!
    NumberOfPlayers(HowManyPlayers);                        //DO *NOT* TOUCH!
                                                            //DO *NOT* TOUCH!
    for i := 0 to high(fighters) do                         //DO *NOT* TOUCH!
    begin                                                   //DO *NOT* TOUCH!
    writeln('player '+tostr(i) +': setting up variables');  //DO *NOT* TOUCH!
      with players[i] do                                    //DO *NOT* TOUCH!
      begin                                                 //DO *NOT* TOUCH!
        Name   := Fighters[i].User;                         //DO *NOT* TOUCH!
        pass   := Fighters[i].pass;                         //DO *NOT* TOUCH!
        Active := Fighters[i].Active;                       //DO *NOT* TOUCH!
        loc    := 'We''re not!';                            //DO *NOT* TOUCH!
        BoxRewards := ['ostu','oins','une'];                //DO *NOT* TOUCH!
      end;                                                  //DO *NOT* TOUCH!
    end;                                                    //DO *NOT* TOUCH!
  end;                                                      //DO *NOT* TOUCH!
                                                            //etc...


Procedure SetupMonsters;
begin
    With Monster_GiantRat do
    begin
      Color     := [5132626];
      HMod      := [0.78];
      SMod      := [0.06];
      cts := 2;
      exp       := 24;
      uptext    := ['ck G','iant', 't ra','rat'];
      Mincount  := 100;
      Tol       := [9];
      Width     := 10;
      Height    := 10;
    end;

    with Monster_Goblin do
    begin
      Color     := [4235406];
      cts       := 0;
      hmod      := [];
      smod      := [];
      exp       := 25;
      uptext    := ['obli','obli','ck Go'];
      mincount  := 75;
      Tol       := [30];
      Width     := 10;
      Height    := 10;
    end;

    with Monster_WolfMinotaur do
    begin
      Color     := [6053729,6712172];
      cts       := 2;
      hmod      := [0.22,0.56];
      smod      := [0.1,0.11];
      exp       := 40;
      uptext    := ['inotaur','olf','inot'];
      mincount  := 75;
      Tol       := [17,7];
      Width     := 10;
      Height    := 10;
    end;

    with monster_LesserDemon do
    begin
      Color     := [1646916];
      cts       := 2;
      hmod      := [0.19];
      smod      := [0.8];
      exp       := 38;
      uptext    := ['esser','Demon','emon','ser dem'];
      mincount  := 100;
      Tol       := [11];
      Width     := 15;
      Height    := 15;
    end;

    with monster_Man do
    begin
      Color     := [4079414];
      cts       := 2;
      hmod      := [2.11];
      smod      := [0.18];
      exp       := 0;
      uptext    := [{'Man',}'el: 2'];
      mincount  := 40;
      Tol       := [8];
      Width     := 5;
      Height    := 5;
    end;
end;


{ RM --------------------------------------------------------------------------]
[ Makes a box of BoxSize with center SPoint, within the MS                     ]
[------------------------------------------------------------------------------}
function MakeMSBox(SPoint: TPoint; BoxSize: integer): TBox;
begin
  Result.x1 := Max(SPoint.x - BoxSize, MSX1);
  Result.x2 := Min(SPoint.x + BoxSize, MSX2);
  Result.y1 := Max(SPoint.y - BoxSize, MSY1);
  Result.y2 := Min(SPoint.y + BoxSize, MSY2);
end;
{By RM. Draws a box.
[------------------------------------------------------------------------------}
procedure DrawBox(Box: TPointArray; color: TColor);
var
  drawing : TBitmap;
  TP : TPoint;
  B: TBox;
begin
  drawing := TBitmap.Create;
  drawing.canvas.handle := SmartGetDebugDC;
  drawing.canvas.Pen.Color := color;


  TP := MiddleTPA(Box);
  B := MakeMSBox(TP, 20);

  drawing.canvas.moveto(B.x1,B.y1);
  drawing.canvas.LineTo(B.x2,B.y1);
  drawing.canvas.LineTo(B.x2,B.y2);

  drawing.canvas.LineTo(B.x1,B.y2);
  drawing.canvas.LineTo(B.x1,B.y1);

  try
    FreeBitmap(drawing);
  except end;
end;


Procedure LoadVars;
begin
  case Lowercase(Fighters[currentplayer].speed) of
    'fast': WeaponTimer := 800;
    'normal': WeaponTimer := 1500;
    'slow': WeaponTimer := 3000;
  end;
  SetArrayLength(FoodArray,29);
  SetArrayLength(IgnoreArray,29);
  splash := BitmapFromString(517, 140, '');
  //breaksplash := BitmapFromString(267, 305, '');

end;





Procedure PaintInv;
var     FBox:TBox;
    TPA:TPointArray;
    I:integer;
begin
  if DEBUGMODE then
  begin
    for i := 1 to 28 do
    begin
      if Foodarray[i] = true then
      begin
        FBox := Invbox(i);
        FindColorsTolerance(TPA,srl_outline_black,FBox.x1,FBox.y1,fBox.x2,Fbox.y2,2);
        SMART_DrawDotsEx(false,TPA,clLime);
      end;
      if IgnoreArray[i] then
      begin
        FBox := Invbox(i);
        FindColorsTolerance(TPA,srl_outline_black,FBox.x1,FBox.y1,fBox.x2,Fbox.y2,2);
        SMART_DrawDotsEx(false,TPA,clRed);
      end;
    end;
  end;
end;

procedure NRNextPlayer(active:boolean); forward;

 //"borrowed" from chickenfighter....
Procedure SetCombatMode(combat:string);
var i:integer;
    TPA:TPointArray;
begin
  WriteLn('Selecting Combat Mode');
    if debugmode then
    SMART_ClearCanvasArea(inttobox(mix1,miy1,mix2,miy2));
  GetAllLevels;
  if fighters[currentplayer].ranged then
  begin
    SetFightMode(2);
    Writeln('Player Fight mode set to 2');
    if DEBUGMODE then
    begin
      GameTab(tab_Inv);
      for i := 1 to 28 do
      begin
        if Foodarray[i-1] = true then
        begin
          FindColorsTolerance(TPA,srl_outline_black,Invbox(i-1).x1,Invbox(i-1).y1,Invbox(i-1).x2,Invbox(i-1).y2,2);
          SMART_DrawDotsEx(false,TPA,clLime);
        end;
      end;
    end;
    exit;
  end;
  case lowercase(combat) of
    'random': begin
                if (Random(300)>200) then combat:='attack' else
                if (Random(200)>100) then combat:='strength' else
                combat:='defense';
              end;
    'lowest': begin
                if Players[CurrentPlayer].level[SKILL_STRENGTH]<Players[CurrentPlayer].level[SKILL_ATTACK] then
                begin
                  if Players[CurrentPlayer].level[SKILL_DEFENCE]<Players[CurrentPlayer].level[SKILL_STRENGTH] then
                  combat:='defense' else combat:='strength';
                end else
                begin
                  if Players[CurrentPlayer].level[SKILL_DEFENCE]<Players[CurrentPlayer].level[SKILL_ATTACK] then
                  combat:='defense' else combat:='attack';
                end;
              end;
    'pure': begin
              if Players[CurrentPlayer].level[SKILL_STRENGTH]<15 then combat:='strength' else
              if Players[CurrentPlayer].level[SKILL_ATTACK]<30 then combat:='attack' else
              if Players[CurrentPlayer].level[SKILL_STRENGTH]<25 then combat:='strength' else
              if Players[CurrentPlayer].level[SKILL_ATTACK]<40 then combat:='attack' else
              combat:='strength';
            end;
    'dslayer': begin
                 if Players[CurrentPlayer].level[SKILL_STRENGTH]<15 then combat:='strength' else
                 if Players[CurrentPlayer].level[SKILL_ATTACK]<40 then combat:='attack' else
                 if Players[CurrentPlayer].level[SKILL_DEFENCE]<32 then combat:='defense' else
                 combat:='strength';
               end;
    'dragon': begin
                if Players[CurrentPlayer].level[SKILL_STRENGTH]<15 then combat:='strength' else
                if Players[CurrentPlayer].level[SKILL_ATTACK]<30 then combat:='attack' else
                if Players[CurrentPlayer].level[SKILL_STRENGTH]<25 then combat:='strength' else
                if Players[CurrentPlayer].level[SKILL_ATTACK]<40 then combat:='attack' else
                if Players[CurrentPlayer].level[SKILL_STRENGTH]<40 then combat:='strength' else
                if Players[CurrentPlayer].level[SKILL_ATTACK]<60 then combat:='attack' else
                combat:='strength';
              end;

    '40flat': begin
                if players[currentplayer].level[skill_attack] < 10 then combat := 'attack' else
                if players[currentplayer].level[skill_strength] < 15 then combat := 'strength' else
                if players[currentplayer].level[skill_defence] < 10 then combat := 'defense' else
                if players[currentplayer].level[skill_attack] < 20 then combat := 'attack' else
                if players[currentplayer].level[skill_strength] < 25 then combat := 'strength' else
                if players[currentplayer].level[skill_defence] < 25 then combat := 'defense' else
                if players[currentplayer].level[skill_attack] < 30 then combat := 'attack' else
                if players[currentplayer].level[skill_strength] < 35 then combat := 'strength' else
                if players[currentplayer].level[skill_attack] < 37 then combat := 'attack' else
                if players[currentplayer].level[skill_strength] < 40 then combat := 'strength' else
                if players[currentplayer].level[skill_defence] < 35 then combat := 'defense' else
                if players[currentplayer].level[skill_attack] < 40 then combat := 'attack' else
                if players[currentplayer].level[skill_defence] < 40 then combat := 'defense' else
                if (players[currentplayer].level[skill_defence] >= 40) and (players[currentplayer].level[skill_attack] >= 40) and (players[currentplayer].level[skill_strength] >= 40) then
                writeln('40''s achieved!');
                NRnextplayer(false);
              end;
  end;
  case combat of
    'attack':    SetFightMode(1);
    'range':     SetFightMode(2);
    'strength':  SetFightMode(2);
    'defense':   SetFightMode(4);
  end;
  Writeln('Player Fight mode set to '+combat);
  PaintInv;
end;






{*******************************************************************************
procedure ProgressReport;
By: Euphamism (THANKS A LOT!)
Description: Debugs bitmap with text on top. Only text refreshes, so no flashing
*******************************************************************************}
procedure SMART_DrawBitmapWithTextMulti(Clear: Boolean; Bitmap: Integer; BmpPlacement: TPoint; TP: TStringArray; Shadow: Boolean; TxtPlacement: TPoint; Font: string; Colour: TColor);
var
  I, B, H, Pic, TPH, Numb: Integer;
  Offset: TPoint;
  TTP: TPointArray;
  Canvas: TCanvas;
begin

  if (not SMART_DebugSetup) then
    SMART_SetupDebug();

  {if (Clear) then
    SMART_ClearCanvasArea( PointToBox( Point(MSX1, MSY1) , Point(MSX2, MSY2) ) );
  SMART_ClearCanvas();}

  TPH := High(TP);

  Offset := IntToPoint(TxtPlacement.x - BmpPlacement.x, TxtPlacement.y - BmpPlacement.y);

  Pic := CopyBitmap(Bitmap);

  for I := 0 to TPH do
  begin

    TTP := LoadTextTPA(TP[i], SmallChars, H);

    for B := 0 to High(TTP) do
    begin

      Numb := ((I + 1) * 13);

      if Shadow then
        try

          FastSetPixel(Pic, TTP[b].x + 1 + Offset.x , TTP[b].y + Numb + 1 + Offset.y,131072);
        except
        end;

      try

        FastSetPixel(Pic, TTP[b].x + Offset.x, TTP[b].y + Numb + Offset.y, Colour);
      except
      end;
    end;
  end;

  Canvas := TCANVAS.Create;
  Canvas.Handle := SmartGetDebugDC;
  DrawBitmap(Pic, Canvas, BmpPlacement.x, BmpPlacement.y);
  FreeBitmap(Pic);
end;



Procedure OnScreen(attackText,HPText:string);
var
  XPH,XPH2,TTB,
  KPH, seconds: Integer;
begin
  //cleardebug;
  if not loggedin then exit;

  seconds := 1+(GetTimeRunning/1000)
  XPH := Round((Exp * 3600) / seconds);
  XPH2 := Round((HPExp * 3600) / seconds);
  KPH := Round((KillCount * 3600) / seconds);
  SMART_ClearCanvasArea(inttobox(msx1,msy1,msx2+1,msy2+1));

  if (lastonscreen + 1000) < GetTimeRunning then
  begin
    SMART_DrawBitmapWithTextMulti(true,splash,point(0,338),[MsToTime(GetTimeRunning, Time_Abbrev),'','XP Gained: '+IntToStr(Exp)+
    ' ('+IntToStr(XPH)+' / hour)','Kills: '+IntToStr(KillCount)+' ('+IntToStr(KPH)+' / hour)','',
    'Break at: '+MsToTime(predictedbreak+(Fighters[currentplayer].breakevery * 60000)+random(Fighters[currentplayer].plusrand),Time_Short)+' (approx)'],
    true,point(14,357),StatChars, 45820 );
    lastonscreen := GetTimeRunning;

  end;

  if debugmode then
  begin
    SMART_DrawTextMulti(false,false,[AttackText,HPText,'Food Available: ' + IntToStr(Foodcount),'Break at: '+MsToTime(predictedbreak+(Fighters[currentplayer].breakevery * 60000)+random(Fighters[currentplayer].plusrand) ,Time_FStop)],point(8,23),UpChars,ClLime);
  end;
end;


//by flight
Procedure HumanMMouse(eX, eY, ranX, ranY: Integer);
var
  randSpeed: extended;
  X,Y,X2,Y2,A,Dist,MP: integer;
begin
  A := MouseSpeed;
  GetMousePos(X, Y);
  Dist := Distance(X, Y, eX, eY);
  MP := Round(Dist/150);
  if MP < 0 then
    MP := 1;

  randSpeed := (random(MouseSpeed) / 2.0 + MouseSpeed) / 10.0;
  X2 := RandomRange(eX-(A*MP), eX+(A*MP));
  Y2 := RandomRange(eY-(A*MP), eY+(A*MP));
  WindMouse(X, Y, X2, Y2, 11, 8, 10.0 / randSpeed, 12.0 / randSpeed, 10.0 * randSpeed, 10.0 * randSpeed);
  GetMousePos(X, Y);
  MMouse(eX, eY, ranX, ranY);
  MouseSpeed := A;
  end;

//by flight
Procedure HumanRandomMouse;
var
  randSpeed: extended;
  x, y, firstSpeed: integer;
begin
  case(Random(10)) of
    2..8:
    begin
      firstSpeed := mouseSpeed;

      mouseSpeed := RandomRange(5,10);
      randSpeed := (random(MouseSpeed) / 2.0 + MouseSpeed) / 10.0;
      GetMousePos(x, y);
      WindMouse(x, y, RandomRange(x - 75, x + 75), RandomRange(y - 75, y + 75),
              30, 55, 10.0 / randSpeed, 12.0 / randSpeed, 10.0 * randSpeed, 10.0 * randSpeed);

      mouseSpeed := firstSpeed;
    end;
  end;
end;

Procedure Relocate;
var x,y,i,l,testval:integer;
    MP:TPoint;
    TPA:TPointArray;
    ATPA:Array of TPointArray;
    label whatthedicks;
begin
  if not loggedin then exit;
  //RunEnergy(20);
  //setrun(true);
  if not FindColorTolerance(x,y,3393507,716,103,729,117,56) then
    RunEnergy(20);
  if not fighters[currentplayer].doRelocate then exit;
  whatthedicks:
  if not loggedin then exit;
  SMART_ClearCanvasArea(IntToBox(516,0, 767,200) );
  FindNormalRandoms;
  TPA := GetMiniMapDotsIn('y' ,MMx1+0, MMy1+0, MMx2-0, MMy2-0);
  AppendTPA(TPA,GetMiniMapDotsIn('r' ,MMx1+0, MMy1+0, MMx2-0, MMy2-0));
  SortTPAFrom(TPA,Point(mmcx,mmcy));
  OnScreen('Relocating...','May god have mercy on your soul.');
  atpa := TPAtoATPA(tpa,20);
  testval := -1;
  if DEBUGMODE then
  begin
    SMART_DrawDotsMulti(false, ATPA);
    for i:= 0 to high(atpa) do
    begin
      if Length(ATPA[i]) < 2 then
      begin
        continue;
      end;
      writeln('ATPA['+inttostr(i)+'] has '+ ToStr(Length(ATPA[i]))+' points.');
      SMART_DrawCircle(false,MiddleTPA(ATPA[i]),20,false,clRed);
    end;
  end;
    for i := 0 to high(atpa) do
    begin
      l := length(atpa[i]);

      if (l > testval) then
        testval := i;
    end;
   MP := MiddleTPA(atpa[testval]);
   SMART_DrawCircle(false,MP,30,false,ClBlue);
   OnScreen('Relocating...','May god have mercy on your soul.');
   if (distance(MMCx,MMCy,MP.x,MP.y) < 45) then exit;

    mouse(MP.x,MP.y,5,5,mouse_left);
    FFlag(5);
end;


function NRRandoms:boolean;
var DTM,x,y:integer;
begin
  result := FindNormalRandoms;
 { DTM := DTMFromString('mggAAAHicY2NgYHjOyMDwCYjFgHgqEBcD8RyguAYQPwJiOSA2Y0Sw/2zUYZg4YTLDwYMHGY4cOcLwfkMyw6FDhxhYgXLYMDMODAEAw+sSkg==');
  if FindDTM(dtm,x,y,msx1,msy1,msx2,msy2) then
  begin
    HumanMMouse(x,y,3,3);
    ClickMouse2(mouse_left);
    writeln('Stupid popup found and killed!');
  end;
  FreeDTM(dtm);  }
end;

//modified from the original to not have a warning....
function PixelShiftOT_(Box : TBox; ShiftInterval, Repetitions, Tolerance : Integer) : Integer;
var
  I : Integer;
  T,TT : LongInt;
  OrigColArr : T2DIntegerArray;
  BoolArr : array of TBoolArray;
begin
  OrigColArr := ReturnGridColorsInBox(Box);
  BoolArr := initBoolArr(Box.X2-Box.X1,Box.Y2-Box.Y1);
  MarkTime(T);
  MarkTime(TT);
  for I := 0 to Repetitions-1 do
  begin
    if (TimeFromMark(T) > (Repetitions*ShiftInterval)) then
    begin
      break;
    end;
    MarkTime(TT);
    wait(Max(0,ShiftInterval-TimeFromMark(TT)));
    ValidatePixels(Box,OrigColArr,BoolArr,Tolerance);
  end;
  Result := CountBools(BoolArr,False);
end;

function idle:boolean;
var avg:integer;
    PlayerBox:TBox;
begin
PlayerBox := inttobox(MSCX - 10,MSCY - 25,MSCX + 15,MSCY + 15);

avg := averagePixelShift(playerbox, 25, 125);
result := inrange(avg,0,75);
end;

Function Attacking: Boolean;
var
  PBox: TBox;
  avg:integer;
begin
  Onscreen('checking attack state','');
  result := false;
  PBox := inttobox(MSCX - 10,MSCY - 25,MSCX + 15,MSCY + 15);

  if not idle then
  begin
    wait(100);
    avg := PixelShiftOT_(PBox, 25, 5, 15);
    if not inrange(avg,0,130) then
    begin
        result := true;
        OnScreen('Attacking','');
    end else
      OnScreen('Not attacking','');
  end else
    OnScreen('Not attacking','');
end;

function NR_FindObjTPA(Colors,tols:TIntegerArray; size,mousetype: Integer;
                       HMod, SMod: TExtendedArray;
                       ReCalc, rclick: Boolean;
                       uptext: string;option:TStringArray): Boolean;

var x, y, i, cts:Integer;
    tpa,ToMerge: TPointArray;
    ATPA: Array of TPointArray;
begin
  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2)

  freeze;
  for i := 0 to high(Colors) do
  begin
    SetColorspeed2Modifiers(Hmod[i], SMod[i]);
    FindColorsSpiralTolerance(mscx, mscy, ToMerge, colors[i], MSX1, MSY1+23, MSX2, MSY2, tols[i]);
    AppendTPA(TPA,ToMerge);
  end;
  unfreeze;
  SetColorToleranceSpeed(CTS);
  Result := false;
  ATPA := TPAtoATPA(TPA, size);
  SMART_DrawDotsMulti(true, ATPA);
  SortATPAFrom(ATPA,point(mmcx,mmcy));
  for i := 0 to high(ATPA) do
  begin
    if length(ATPA[i]) < 15 then
      continue;
    MiddleTPAex(ATPA[i], x, y);
    MMouse(x, y, 10, 10)
    if WaitUptext(uptext, 200) then
    begin
      clickmouse2(mousetype);
      WaitOptionMulti(option,200);
      stats_IncVariable('Items Picked Up',1);
      result := true;
      exit;
    end;
    result := false;
  end;
end;

procedure pickupdrops;
var TPA:TPointArray;
    x,y,i: integer;
    ATPA: Array of TPointArray;
begin
  if not loggedin then exit;
  if not Fighters[currentplayer].pickupdrops then
    exit;
  if not InvFull then
  repeat
    OnScreen('Picking up drops','');
    if NR_FindObjTPA(Fighters[currentplayer].PickUps.Colors,
                     Fighters[currentplayer].PickUps.Tols,30,
                     mouse_Right,
                     Fighters[currentplayer].PickUps.HMods,
                     Fighters[currentplayer].PickUps.SMods,
                     false, false,'ake',
                     Fighters[currentplayer].PickUps.Names) then
      begin
        wait(1000+random(500));
        while IsMoving and (not idle) do
        begin
          wait(1000);
          OnScreen('Picking up drops','');
        end;
      end else
        break;
    until(false);
end;


  Function DidAntiban: Boolean;
  var
    i: Integer;
  begin
    Result := False;
    if not LoggedIn then Exit;

    i := Random(450);
    case i of
      1..45:
        begin
          HumanRandomMouse;
          Result := True;
        end;
      46:
        begin
          HoverSkill('Range', False);
          Result := True;
        end;
      47:
        begin
          HoverSkill('Attack', False);
          Result := True;
        end;
      48:
        begin
          HoverSkill('Hitpoints', False);
          Result := True;
        end;
      49:MakeCompass('rand');
      50..450: Exit;
    end;

  end;

Function Eat(whattext:string): Boolean;
var
  i,x,y,antilog,restsec: Integer;
begin
  Result := False;
  OnScreen(whattext,'');
  if Not LoggedIn then Exit;
  if InvEmpty then Exit;
  if FindColorTolerance(x,y,65280,719,24,745,44,5) then Exit;

  OnScreen(whattext,'HP Not green, checking inv.');
  for i := 1 to 28 do
  begin
    FindNormalRandoms;

    if FoodArray[i] then
    begin
      InvMouse(i, mouse_move);

      if WaitUpText('Eat', 300) then
      begin
        ClickMouse2(True);
        Wait(RandomRange(875, 990));
        stats_IncVariable('Food (Eaten)',1);
        foodcount := foodcount - 1;
        FoodArray[i] := false;
        SMART_ClearCanvasArea(invbox(i));
        if debugmode then
        begin
          SMART_ClearCanvasArea(IntToBox(6,55,300,77));
          //SMART_DrawText(8,57,UpChars,'Food Available: ' + IntToStr(Foodcount),clLime);
          onscreen(whattext,'Ate!')
          SMART_ClearCanvasArea(invbox(i));
        end;
        if (FindColorTolerance(x,y,65280,719,24,745,44,5)) then
          Exit;
      end;
    end;


      if (i >= 27) and FindColorTolerance(x,y,255,719,24,745,44,5) then
      begin
        if fighters[currentplayer].EmergencyTeleport then
        begin
          writeln('HP Critical!! Teletabbing out!');
          MouseItem(1,mouse_left);
          NRnextplayer(false);
        end;
        OnScreen(Whattext,'No food, waiting for attack to finish, so we can rest');
        repeat
          wait(1000);
          writeln('attacking still. Waiting to finish so that we can rest');
        until(not attacking);
        writeln('resting for hp');
        onscreen('finishing combat to rest','resting for hp');
        repeat
          SetRest;
        until(isresting);
        MarkTime(antilog);
        repeat
          if TimeFromMark(antilog) > 240000 then
          begin
            wait(random(20000));
            writeln('doing a quick tab change to say logged in');
            HoverSkill('Range', False);
            GameTab(randomrange(21,37));
            marktime(antilog)
          end;
          onscreen('','resting for hp ('+tostr(RestSec)+'s)');
          wait(1000);
          inc(restsec);
        until(FindColorTolerance(x,y,2070783,719,24,745,44,5));
        writeln('hp orange, waiting for a bit longer, then beginning');

        HoverSkill('Range', False);
            GameTab(randomrange(21,37));
          gametab(tab_inv);
        for i := 0 to randomrange(20,38) do
        begin
          wait(1000);
          inc(restsec);
          onscreen('','resting for hp ('+tostr(RestSec)+'s)');
        end;


          whattext:='';
      end;
  end;
  onscreen(whattext,'')
end;

procedure progressReport;
var i:integer;
begin
  //ClearDebug;
  writeln(' ______________ Euphonic Fighter Elite _______________');
  writeln('//====== Exclusively available at Villavu.com =======\\');
  writeln('|| Progress Report: ' + MsToTime(GetTimeRunning,Time_Bare));
  writeln('|| Kills: '+ ToStr(KillCount));
  writeln('|| XP: '+ ToStr(Exp));
  writeln('|| Breaks: '+tostr(breaks));
  Writeln('|| ================== Player Status ===================');
  writeln('|| # | Active | False Reason?');
  for i := 0 to high(players) do
  begin                                                                 //need to figure out padding :s
    writeln('|| '+ToStr(i)+' |  '+ tostr(Players[currentplayer].Active)+' | '+ tostr(players[currentplayer].loc));
  end;
  writeln('\\===================================================//');
end;

//Almost all if this is written by Flight. Thanks
Function FindFreeTargets(var Output:TPointArray; Tol,Color:TIntegerArray;  CTS, MinCount, Width, Height: Integer;hmods,Smods:TExtendedArray): boolean;
var
  NPCBox,HPZone: TBox;
  TopPoint,MiddleHPZone,
  MiddleNPCBox: TPoint;
  TPA,ColorsToMerge,GreenPointsA,RedPointsA,
  GreenPointsB,RedPointsB,
  RTPA: TPointArray;
  L,i,OldCTS,R,poop: Integer;
  ATPA: T2DPointArray;
begin
  OldCTS := GetColorToleranceSpeed;
{Find NPC colors}
  ColorToleranceSpeed(CTS);
  //SetArrayLength(ColorsToMerge,50);
  if CTS = 2 then
  begin
    for i := 0 to high(color) do
    begin
      SetColorspeed2Modifiers(hmods[i],smods[i]);
      FindColorsSpiralTolerance(mscx,mscy,colorstomerge,color[i],msx1,msy1,msx2,msy2,tol[i]);
      AppendTPA(TPA,ColorsToMerge);
    end;
  end else
  begin
    for i := 0 to high(color) do
    begin
      FindColorsSpiralTolerance(mscx,mscy,colorstomerge,color[i],msx1,msy1,msx2,msy2,tol[i]);
      AppendTPA(TPA,ColorsToMerge);
    end;
  end;

  if (Length(TPA) < 1) then
  begin
    ColorToleranceSpeed(OldCTS);
    result := false;
    Exit;
  end;
{Split TPA's into boxes defined by 'Width' & 'Height'}
  ATPA := SplitTPAEx(TPA, Width, Height);
  L := High(ATPA);
  SetArrayLength(ATPA, L+1);
{Loop through each box}
  for i := 0 to L do
  begin
  {If the # of color points found inside the box is >= to 'MinCount'}
    if (Length(ATPA[i]) >= MinCount) then
      NPCBox := GetTPABounds(ATPA[i]);
  {Inside each valid NPC box}
    with NPCBox do
    begin
    {Get middle top point of the box}
      TopPoint := Point(((NPCBox.X1+NPCBox.X2)/2), NPCBox.Y1);

      if (TopPoint.X < MSX1) then
        TopPoint.X := MSX1;
      if (TopPoint.Y < MSY1) then
        TopPoint.Y := MSY1;
    {Using 'TopPoint', specify a static region in which a health bar would be present}
      HPZone := IntToBox(TopPoint.X-30, TopPoint.Y-40, TopPoint.X+30, TopPoint.Y);

      if (HPZone.X1 < MSX1) then
        HPZone.X1 := MSX1;
      if (HPZone.X2 > MSX2) then
        HPZone.X2 := MSX2;
      if (HPZone.Y1 < MSY1) then
        HPZone.Y1 := MSY1;
      if (HPZone.Y2 > MSY2) then
        HPZone.Y1 := MSY2;
    {These two aren't really needed}
      MiddleHPZone := Point(((HPZone.x1+HPZone.x2)/2), ((HPZone.y1+HPZone.y2)/2));
      MiddleNPCBox := Point(((NPCBox.x1+NPCBox.x2)/2), ((NPCBox.y1+NPCBox.y2)/2));

      if fighters[currentplayer].ignoreCombat then
      begin
      {Search within both the 'NPCBox' and the HPZone for both red & green colors}
        ColorToleranceSpeed(3);
        FindColorsSpiralTolerance(MiddleNPCBox.X, MiddleNPCBox.Y, GreenPointsA, 49242, NPCBox.X1, NPCBox.Y1, NPCBox.X2, NPCBox.Y2, 2);
        FindColorsSpiralTolerance(MiddleNPCBox.X, MiddleNPCBox.Y, RedPointsA, 524459, NPCBox.X1, NPCBox.Y1, NPCBox.X2, NPCBox.Y2, 2);
        FindColorsSpiralTolerance(MiddleHPZone.X, MiddleHPZone.Y, GreenPointsB, 49242, HPZone.X1, HPZone.Y1, HPZone.X2, HPZone.Y2, 2);
        FindColorsSpiralTolerance(MiddleHPZone.X, MiddleHPZone.Y, RedPointsB, 524459, HPZone.X1, HPZone.Y1, HPZone.X2, HPZone.Y2, 2);
        ColorToleranceSpeed(OldCTS);
      end;

    {If no red or green is found within the NPCBox and HPZone}
      if ((Length(GreenPointsA) < 1) and (Length(RedPointsA) < 1)
        and (Length(GreenPointsB) < 1) and (Length(RedPointsB) < 1)) then
      begin
      {Add the center of the NPCBox to 'RTPA'}
        SetArrayLength(RTPA, (Length(RTPA)+1));
        RTPA[R] := MiddleNPCBox;
        SMART_DrawBoxEX(false,npcBOX,clRed);
        SMART_DrawDotsEx(false,ATPA[i],clBlue);
        Inc(R);
      end;

    end;

  end;

{Sort the 'RTPA' from the center of the screen}
  SortTPAFrom(RTPA, Point(MSCX, MSCY));
{RTPA now holds the center point for each NPCBox of 'avaiable' targets}
  Output := RTPA;
  result := true;

end;


  //
procedure AttackMonster;
var
  T,i,balls,LostT: Integer;
  KilledMonster: Boolean;
  TPA: TPointArray;
label
  Search;
begin
  if not LoggedIn then Exit;
  Eat('Searching for monster');
  //OnScreen('Searching for monster','');
  marktime(lostT)
  I := -1;   //for the first search, it needs to be set to -1, because it will be increased right after
  Search:
  INC(I);
  KilledMonster := False;
  MouseSpeed := RandomRange(16, 23);

  if TimeFromMark(lostT) > fighters[currentplayer].monsterWait * 1000 then
  begin
    writeln('No mosters found for '+tostr(fighters[currentplayer].monsterWait)+' seconds! Setting false!');
    Players[currentplayer].Loc := 'Lost :(';
    NRnextplayer(false);
    exit;
  end;


  FindFreeTargets(TPA,
                 Fighters[currentplayer].WhatMonster.Tol,
                 Fighters[currentplayer].WhatMonster.color,
                 Fighters[currentplayer].WhatMonster.CTS,
                 Fighters[currentplayer].WhatMonster.mincount,
                 Fighters[currentplayer].WhatMonster.width,
                 Fighters[currentplayer].WhatMonster.height,
                 Fighters[currentplayer].WhatMonster.HMod,
                 Fighters[currentplayer].WhatMonster.SMod);

  OnScreen('Searching for monster','');
  if i >= length(TPA) then
  begin
    i:=0;
    inc(balls);
    if balls > 3 then
    begin
      relocate;
      balls := 0;
      FindNormalRandoms;
      MakeCompass(randomrange(0,360));
      goto search;
    end;
  end;

  if (Length(TPA) > 0) then
  begin
    if not fighters[currentplayer].ranged then
    begin
        HumanMMouse(TPA[i].X, TPA[i].Y, 5, 5);
    end else
        HumanMMouse(TPA[High(tpa)-i].x,TPA[high(TPA)-i].y,5,5);

    if WaitUpTextMulti(Fighters[currentplayer].WhatMonster.Uptext , 200) or (Fighters[CurrentPlayer].Clicktype = mouse_Right)  then
    begin
      ClickMouse2(Fighters[currentplayer].Clicktype);
      if not DidRedClick or WaitOptionMulti(['tt'],300) then
        goto Search;
    end else
    begin
      inc(i)
      goto Search;
    end;

    FFlag(0);
    While not idle do    //wait to get there (stop moving)
      Wait(100);

    MarkTime(T);
    repeat
      if not LoggedIn then Exit;
      FindNormalRandoms;

      if (TimeFromMark(T) > 4000) then
        Exit;

      if Attacking then
        break;

      if LevelUp then
        setcombatMode(Fighters[currentplayer].mode);
    until(false)

    KilledMonster := True;
    MarkTime(T);
    repeat
      if not LoggedIn then Exit;
      FindNormalRandoms;
      Eat('');

      if Attacking then
        MarkTime(T);

      if (TimeFromMark(T) > WeaponTimer) then
        break;
        wait(300)
    until(false)

    if KilledMonster then
    begin
      KilledMonster := False;
      Inc(KillCount);
      stats_IncVariable('Monsters Killed', 1);
      stats_IncVariable('Total EXP Gained',fighters[CurrentPlayer].WhatMonster.exp );
      IncEx(Exp, fighters[CurrentPlayer].WhatMonster.exp );
      IncEx(HPExp, 14);
      OnScreen('','');
      progressReport;
    end;

  end;
end;



Procedure CleanInv;
var i,bonesDTM,x,y:integer;
begin
  OnScreen('','');
  if InvCount = lastinvcount then
    exit;
  bonesDTM := DTMFromString('mggAAAHicY2NgYJjGxMAwEYhnAPFMIF7ABBGbzsjAMB+IJwDxNCCeA8UbVq4A6mLCwOxAEhsGyTJiwRAAAJTkCXc=');
  OnScreen('Cleaning Inv.','');
  if fighters[currentplayer].TrainPrayer then
   begin
    for i := 1 to 28 do
    begin
      if FindDTM(bonesDTM,x,y,MIx1,MIy1,MIx2,MIy2) then
      begin
        HumanMMouse(x,y,5,5);
        if WaitUptext('ury',275) then
        begin
          ClickMouse2(mouse_left);
          wait(900+random(400))
          stats_incVariable('Bones (Burried)',1);
        end;
      end;
    end;
   end;

  for i := 1 to 28 do
  begin
    if ExistsItem(i) and (not FoodArray[i]) and (not IgnoreArray[i]) then
    begin
      MMouse(ItemCoords(i).x,Itemcoords(i).y,5,5);
      if WaitUpTextMulti(Fighters[CurrentPlayer].alwaysdrop,200) then
      begin
        ClickMouse2(mouse_right);
        WaitOption('rop',500);
        continue;
      end;

      if WaitUpText('Eat',275) then
      begin
        FoodArray[i] := true;
        inc(foodcount);
        onscreen('','');
        continue;
      end else
      begin
        IgnoreArray[i] := true;
      end;
    end;
  end;



  lastinvcount := invcount;
  PaintInv;
  onscreen('','');
  freedtm(bonesDTM);
end;


PROCEDURE NRNextPlayer(active:boolean);
var i : integer;
begin
  nextplayer(active);
  for i := 0 to 28 do
  begin
    IgnoreArray[i] := false;
  end;
  for i := 0 to 28 do
  begin
    FoodArray[i] := false;
  end;
  SMART_ClearCanvas;
  MakeCompass('n');
  SetAngle(SRL_ANGLE_HIGH);
  cleaninv;
  case Lowercase(Fighters[currentplayer].speed) of
    'fast': WeaponTimer := 800;
    'normal': WeaponTimer := 1500;
    'slow': WeaponTimer := 3000;
  end;

end;

Procedure KillNagscreen;
var X, Y : Integer;
var NagScreenDTM : Integer;
begin         {
  NagScreenDTM := DTMFromString('mlwAAAHicY2dgYPjMyMDwAYi/QjGI/Q6IfwGxCFBeEIrFoVgEir9ut2H4czKV4f1GO4YUGxGG7iBZhiBFRYa09HS4GmyYEQ+GAgDZGxE5');
  if FindDTM(NagScreenDTM, X, Y, 480, MSY1, MSX2, 30) then
  begin
    // found nag screen, we are user so we kinda wait
    Wait(500 + Random(500));
    Mouse(x, y, 2, 2, true);
  end;
  freedtm(nagscreenDTM); }
end;


Procedure BreakManager;
var waittime,waits:integer;
    var
  XPH,XPH2,TTB,
  KPH, seconds,bAt,bF,bR: Integer;
begin
  //writeln(tostr((timefrommark(lastbreak) + (Fighters[currentplayer].breakevery * 1000 * 60) + (Fighters[currentplayer].plusrand * 60000))) + ' VS ' + tostr(GetTimeRunning))

  bAt := Fighters[currentplayer].breakevery * 60000;
  bF  := Fighters[currentplayer].breakfor * 60000;
  bR  := random(fighters[currentplayer].plusrand * 60000) ;
  if (lastbreak + bAt + bR) < GetTimeRunning then
  begin
    writeln(tostr(lastbreak+bat+br) + ' < ' + tostr(gettimerunning));
    writeln('Taking a break!');
    SMART_ClearCanvas;
    marktime(lastbreak);
    Logout;
    waittime := ((Fighters[currentplayer].breakfor + Random(Fighters[currentplayer].plusrand))* 1000 * 60) / 100;
    if debugmode then
      writeln('1% = '+ tostr(waittime));
    Repeat

      seconds := 1+(GetTimeRunning/1000)
      XPH := Round((Exp * 3600) / seconds);
      //XPH2 := Round((HPExp * 3600) / seconds);
      KPH := Round((KillCount * 3600) / seconds);

      //SMART_DrawBitmapWithTextMulti(true,breaksplash,point(497,585),['Breaking',tostr(waits)+'% of break complete','','XP Gained: '+IntToStr(Exp)+' ('+IntToStr(XPH)+' / hour)','Kills: '+IntToStr(KillCount)+' ('+IntToStr(KPH)+' / hour)'],true,point(521, 631),StatChars, 45820);
      //SMART_DrawBitmapWithTextMulti(true,splash,point(0,338),[MsToTime(GetTimeRunning, Time_Abbrev),'','XP Gained: '+IntToStr(Exp)+' ('+IntToStr(XPH)+' / hour)','Hitpoints XP: '+IntToStr(HPExp)+' ('+IntToStr(XPH2)+' / hour)','','Kills: '+IntToStr(KillCount)+' ('+IntToStr(KPH)+' / hour)'],true,point(14,357),StatChars, 45820 )

      SMART_DrawTextEx(true,8,79,StatChars,'Breaking: ' + tostr(waits) + '% Done', ClLime);

      Wait(WaitTime)
      Inc(Waits)


    Until(Waits = 100);


    inc(breaks);
    NRNextPlayer(true);
    FindNormalRandoms;
    ClickNorth(SRL_ANGLE_HIGH);
    SetCombatMode(Fighters[currentplayer].mode)
    lastbreak := gettimerunning;
    PredictedBreak := GetTimeRunning;
  end;
end;

//Please note that almost all of this procedure, including the comment below, was wrritten by Harry, then edited by Shuttleu, and then edited again  by me.
//Please note that almost all of this code was written by Harry, i just edited it a bit
procedure CheckUpdates;
var Neifile:integer;
    OnlineVersion, NewScript, NeiFeilNennen:string;
begin
  if AutoUpdate then
  begin
    writeln('Checking for script updates...');
    OnlineVersion := GetPage('https://github.com/nick9321/EuphonicFighter/raw/master/Version.txt');
    writeln(OnlineVersion);
    writeln(version)
    if (OnlineVersion <> version) then
    begin
      writeLn('Newer script version online!');
      writeLn('Autoupdating to newer version.');
      NewScript := GetPage('https://github.com/nick9321/EuphonicFighter/raw/master/Euphonic_Fighter.simba');

      NeiFeilNennen := ScriptPath+ 'Euphonic Fighter Version '+OnlineVersion+'.simba';
      Neifile := Rewritefile(NeiFeilNennen, true);
      try
        WriteFileString(Neifile, NewScript);
      except
        begin
          writeLn('Fatal error writing to '+NeiFeilNennen+'!!');
          terminatescript;
        end;
      end;
      CloseFile(Neifile);
      writeLn('New script downloaded to '+NeiFeilNennen+'!! Please use this one!!');
      TerminateScript;                                            {
      writeln('Please download the latest version of the script at');
      writeln('http://villavu.com/forum/showthread.php?p=1058352#post1058352');
      terminateScript;                                                         }
    end else
      writeLn('You have the latest version of the script!');
  end else
    WriteLn('I can''t force you to, but please enable updates, as they may include major changes, fixes, or new content!');
end;
  //end of stolen code

var everyhundo,invcleanuptime,sendStats:integer;
begin
  CheckUpdates;
  Smart_Server := 86;
  Smart_Members := True;
  Smart_Signed := True;
  Smart_SuperDetail := False;
  everyhundo:=1;
  setupSRL();
  SmartSetRefresh(100);
  setupmonsters;
  DeclarePlayers;
  notouch;
  SetupSRLStats(1032, SRLStatsUsername, SRLStatsPassword);
  LoadVars;
  Smart_ClearCanvas;
  Wait(2000);
  OnScreen('Setting up','');
  cleardebug;
  LoginPlayer;
  FindNormalRandoms;
  ClickNorth(SRL_ANGLE_HIGH);
  SetCombatMode(Fighters[currentplayer].mode);
  lastbreak:=gettimerunning;
  PredictedBreak := GetTimeRunning;
  lastonscreen := GetTimeRunning;
  marktime(sendStats);
  CleanInv;
  relocate;
  Repeat
    breakmanager;
    KillNagscreen;
    if killcount > (10*invcleanuptime) then
    begin
      CleanInv;
      inc(invcleanuptime);
    end;
    if not LoggedIn then
    begin
      LoginPlayer;
      FindNormalRandoms;
      ClickNorth(SRL_ANGLE_HIGH);
      SetCombatMode(Fighters[currentplayer].mode);

    end;
    FindNormalRandoms;
    AttackMonster;
    findnormalrandoms;
    wait(1000+random(500));
    pickupdrops;
    Relocate;
    CleanInv;
    if KillCount > (100*everyhundo) +random(10) then
    begin
      SetCombatMode(Fighters[currentplayer].mode);
      inc(everyhundo);
    end;
    DidAntiban;
    if TimeFromMark(SendStats) > 600000 then
    begin
      stats_Commit;
      marktime(SendStats);
    end;
  Until(AllPlayersInactive)
end.
